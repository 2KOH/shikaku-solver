const { solve } = require('../src/index.js');

const data = ((rows, columns, text) => {
	const lines = text.split(/\r|\n|\r\n/);
	const numbers = [];
	for (let y = 0; y < rows && y < lines.length; y++) {
		const cells = lines[y].split(/\s/);
		for (let x = 0; x < columns && x < cells.length; x++) {
			const number = ~~cells[x];
			if (number <= 0) continue;
			numbers.push({ x, y, number });
		}
	}
	return { rows, columns, numbers };
})(20, 36,
`. . 4 . . . . 6 . . . . . 12 . . . . . . . 8 . . . . . . . . 6 . . . . 6
. 4 . . . . 5 . . . . . 4 . . . . . . 3 5 . . . . . . . . 6 . . . . 8 .
4 . . . 4 . . . . . 10 . . . . . . 6 8 . . . . . . 9 3 4 . . . . . 8 . .
. . . 6 . . . . . . . 2 . . . . . . . . . . . . . . . . . . . 10 . . . .
. . . . . . . . . 6 . . . . . 4 . . . . . 12 6 . . . . . . . 6 . . . . .
. 8 . . 4 2 8 . 4 . . . . . 4 . . . . . . . . 4 . . . . 4 . . . . . . .
5 . . . . . . . . . . . . 6 . . . . . . . . . 3 . . . 8 . . . . . . . 8
. . . . . . . . . . . . 4 . . . 8 . . . 4 . . . . . . . . . . . . . 6 .
. . . 8 . . . . . . 8 . . . . 6 . . . 6 . . . . . 4 . . . . 6 6 6 . . .
. . 9 . . . . 4 . . . . . 4 . . . . . . . . 2 . . . . . 8 . . . . . . .
. . . . . . . 8 . . . . . 9 . . . . . . . . 4 . . . . . 8 . . . . 4 . .
. . . 6 8 8 . . . . 9 . . . . . 9 . . . 9 . . . . 8 . . . . . . 8 . . .
. 6 . . . . . . . . . . . . . 4 . . . 12 . . . 6 . . . . . . . . . . . .
6 . . . . . . . 6 . . . 6 . . . . . . . . . 6 . . . . . . . . . . . . 4
. . . . . . . 4 . . . . 6 . . . . . . . . 8 . . . . . 4 . 4 6 6 . . 10 .
. . . . . 7 . . . . . . . 12 6 . . . . . 9 . . . . . 3 . . . . . . . . .
. . . . 4 . . . . . . . . . . . . . . . . . . . 6 . . . . . . . 4 . . .
. . 6 . . . . . 4 6 4 . . . . . . 4 4 . . . . . . 8 . . . . . 4 . . . 3
. 4 . . . . 6 . . . . . . . . 6 6 . . . . . . 8 . . . . . 4 . . . . 4 .
4 . . . . 6 . . . . . . . . 8 . . . . . . . 6 . . . . . 7 . . . . 3 . .`
)

const startTime = Date.now();
const result = [...solve(data)];
const endTime = Date.now();
console.log(`time: ${ endTime - startTime } msec`);
