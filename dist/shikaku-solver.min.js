(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ShikakuSolver = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const State=require("./state.js");module.exports=class{constructor({rows:a,columns:b,numbers:c=[]}={}){this._rows=a,this._columns=b,this._numbers=c.map(({x:a,y:b,number:c})=>({x:a,y:b,number:c}))}get rows(){return this._rows}get columns(){return this._columns}get numbers(){return this._numbers}addNumber({x:a,y:b,number:c}){this._numbers.push({x:a,y:b,number:c})}getState(){const a=this.columns+1,b=[];for(let a=0;a<this.rows;a++){for(let a=0;a<this.columns;a++)b.push({});b.push({decided:!0})}for(let a=0;a<this.columns;a++)b.push({decided:!0});return this.numbers.forEach(({x:c,y:d,number:e})=>{b[c+d*a].number=e}),new State({width:a,cells:b})}setState(){}};

},{"./state.js":5}],2:[function(require,module,exports){
module.exports=class{constructor({number:a=null,decided:b=!1}={}){this._number=a,this._decided=!!b}get number(){return this._number}set number(a){this._number=a}get decided(){return this._decided}set decided(a){this._decided=!!a}isNumber(){return null!=this._number&&!this._decided}isVoid(){return null==this._number&&!this._decided}};

},{}],3:[function(require,module,exports){
const Board=require("./board.js"),{search}=require("./utilities.js");module.exports=class{static*solve({rows:a,columns:b,numbers:c}){const d=new Board({rows:a,columns:b,numbers:c}).getState();for(const{squares:e}of search(d))yield e}static get VERSION(){return"0.0.1"}};

},{"./board.js":1,"./utilities.js":6}],4:[function(require,module,exports){
module.exports=class{constructor({x:a,y:b,width:c,height:d}={}){this._x=a,this._y=b,this._width=c,this._height=d}get x(){return this._x}get y(){return this._y}get width(){return this._width}get height(){return this._height}};

},{}],5:[function(require,module,exports){
const Square=require("./square.js"),Cell=require("./cell.js");module.exports=class{constructor({width:a,squares:c=[],cells:b,undecidedCells:d=null}={}){this._width=a,this._squares=c.map(a=>new Square(a)),this._cells=b.map(a=>new Cell(a)),d?this._undecidedCells=new Set(d):(this._undecidedCells=new Set,this._cells.forEach((a,b)=>{a.decided||this._undecidedCells.add(b)}))}get width(){return this._width}get squares(){return this._squares}get cells(){return this._cells}get undecidedCells(){return this._undecidedCells}addSquare({x:a,y:b,width:c,height:d}){this.squares.push(new Square({x:a,y:b,width:c,height:d}));const e=this.getFirstUndecidedCell();for(let f=0;f<d;f++){const a=e+f*this.width;for(let b=0;b<c;b++){const c=a+b;this.cells[c].decided=!0,this.undecidedCells.delete(c)}}return this}getFirstUndecidedCell(){return this.undecidedCells.values().next().value}};

},{"./cell.js":2,"./square.js":4}],6:[function(require,module,exports){
const State=require("./state.js"),getNotVoids=(c,d,e,a)=>{const b=[];for(let f=0;2>b.length&&!(null!=a&&f>=a)&&!(null!=e&&1<=b.length&&f>=e);f++)c[d+f].isVoid()||b.push(f);return b},tryState=function*(a){const b=a.getFirstUndecidedCell(),{width:c,cells:d}=a;let e=null,f=null,g=null;for(let j=0;!d[b+j*c].decided;j++){const i=j+1,h=b+j*c,k=getNotVoids(d,h,e,g);switch(k.length){case 0:break;case 1:{if(e<=k[0]){g=k[0];break}g=e,e=k[0],f=d[h+e].decided?null:d[h+e].number;break}default:e=k[0],f=d[h+e].decided?null:d[h+e].number,g=k[1];}if(null==f)continue;if(e===g)continue;if(0!=f%i)continue;const l=f/(j+1);e+1<=l&&l<g+1&&(yield new State(a).addSquare({x:b%c,y:~~(b/c),width:l,height:i}))}},isFinished=a=>0===a.undecidedCells.size,search=function*(a){for(const b=[a];b.length;){const a=b.pop();if(isFinished(a)){yield a;continue}b.push(...tryState(a))}};module.exports={getNotVoids,tryState,isFinished,search};

},{"./state.js":5}]},{},[3])(3)
});
